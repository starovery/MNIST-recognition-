import numpy as np
import os
import gzip
import struct
import array

import matplotlib.pyplot as plt
import matplotlib.image
from urllib.request import urlretrieve

import data as d

from sklearn import preprocessing


def download(url, filename):
    if not os.path.exists('data'):
        os.makedirs('data')
    out_file = os.path.join('data', filename)
    if not os.path.isfile(out_file):
        urlretrieve(url, out_file)

def mnist():
    base_url = 'http://yann.lecun.com/exdb/mnist/'

    def parse_labels(filename):
        with gzip.open(filename, 'rb') as fh:
            magic, num_data = struct.unpack(">II", fh.read(8))
            return np.array(array.array("B", fh.read()), dtype=np.uint8)

    def parse_images(filename):
        with gzip.open(filename, 'rb') as fh:
            magic, num_data, rows, cols = struct.unpack(">IIII", fh.read(16))
            return np.array(array.array("B", fh.read()), dtype=np.uint8).reshape(num_data, rows, cols)

    for filename in ['train-images-idx3-ubyte.gz',
                     'train-labels-idx1-ubyte.gz',
                     't10k-images-idx3-ubyte.gz',
                     't10k-labels-idx1-ubyte.gz']:
        download(base_url + filename, filename)

    train_images = parse_images('data/train-images-idx3-ubyte.gz')
    train_labels = parse_labels('data/train-labels-idx1-ubyte.gz')
    test_images  = parse_images('data/t10k-images-idx3-ubyte.gz')
    test_labels  = parse_labels('data/t10k-labels-idx1-ubyte.gz')

    return train_images, train_labels, test_images, test_labels


def load_mnist():
    partial_flatten = lambda x : np.reshape(x, (x.shape[0], np.prod(x.shape[1:])))
    one_hot = lambda x, k: np.array(x[:,None] == np.arange(k)[None, :], dtype=int)
    train_images, train_labels, test_images, test_labels = mnist()
    train_images = partial_flatten(train_images) / 255.0
    test_images  = partial_flatten(test_images)  / 255.0
    train_labels = one_hot(train_labels, 10)
    test_labels = one_hot(test_labels, 10)
    N_data = train_images.shape[0]

    return N_data, train_images, train_labels, test_images, test_labels


def plot_images(images, ax, ims_per_row=5, padding=5, digit_dimensions=(28, 28),
                cmap=matplotlib.cm.binary, vmin=None, vmax=None):
    """Images should be a (N_images x pixels) matrix."""
    N_images = images.shape[0]
    N_rows = np.int32(np.ceil(float(N_images) / ims_per_row))
    pad_value = np.min(images.ravel())
    concat_images = np.full(((digit_dimensions[0] + padding) * N_rows + padding,
                             (digit_dimensions[1] + padding) * ims_per_row + padding), pad_value)
    for i in range(N_images):
        cur_image = np.reshape(images[i, :], digit_dimensions)
        row_ix = i // ims_per_row
        col_ix = i % ims_per_row
        row_start = padding + (padding + digit_dimensions[0]) * row_ix
        col_start = padding + (padding + digit_dimensions[1]) * col_ix
        concat_images[row_start: row_start + digit_dimensions[0],
                      col_start: col_start + digit_dimensions[1]] = cur_image
    cax = ax.matshow(concat_images, cmap=cmap, vmin=vmin, vmax=vmax)
    plt.xticks(np.array([]))
    plt.yticks(np.array([]))
    return cax

def save_images(images, filename, **kwargs):
    fig = plt.figure(1)
    fig.clf()
    ax = fig.add_subplot(111)
    plot_images(images, ax, **kwargs)
    fig.patch.set_visible(False)
    ax.patch.set_visible(False)
    plt.savefig(filename)
    


##############Question 1########################
N_data, train_images, train_labels, test_images, test_labels = d.load_mnist()
train_labels = train_labels[0:10000,:] #10000 array of labels c (0-9)
train_images = train_images[0:10000,:]    

#binarize train_images to tern them B&W
threshold, upper, lower = 0.5, 1, 0
train_images = np.where(train_images>threshold, upper, lower)


Nc = train_labels.sum(axis = 0)  #Nc in formula from 1a
train_images_tr = np.transpose(train_images)  #transpose (X)
Ncd = np.matmul(train_images_tr, train_labels)  

theta_estimate = (Ncd + 1) / (Nc + 2)  #formula for theta from 1a
theta_estimate_tr = np.transpose(theta_estimate) #transpose of theta for plottig
d.save_images(theta_estimate_tr, "1b") #plot

######part d############   
####we need Xd*log(theta) + (1-Xd)log(1-theta) coded using numpy package for both train and test sets:
LogLik_training =  np.matmul(train_images, np.log(theta_estimate)) + np.matmul(1-train_images, np.log(1 - theta_estimate)) 
LogLik_testing = np.matmul(test_images, np.log(theta_estimate)) + np.matmul(1-test_images, np.log(1 - theta_estimate))
chosen_loglik_training = LogLik_training * train_labels #picked LogLik according to the label distribution
chosen_loglik_testing = LogLik_testing * test_labels #same but for testing
avgLogLik_training = np.sum(chosen_loglik_training) / 10000 
avgLogLik_testing = np.sum(chosen_loglik_testing) / 10000                          
print(avgLogLik_training)
print(avgLogLik_testing)

from sklearn.metrics import accuracy_score
from scipy.misc import logsumexp

accsTrain = train_labels[np.arange(10000), LogLik_training.argmax(1)]
accuracy_tr = sum(train_labels[np.arange(10000), LogLik_training.argmax(1)])/10000
accuracy_test=sum(test_labels[np.arange(10000), LogLik_testing.argmax(1)])/10000



#####################Question 2#################
#####2 C##########
#sample c
import random
labels = np.array([])
for i in range(10):
    labels = np.append(labels, np.random.randint(0,10))
labels = labels.astype(int)
x_a = np.random.rand(10,784)
sample = (np.asmatrix(theta_estimate[:,labels].T) > np.asmatrix(x_a))
d.save_images(sample,"2cc") 

#########2 F##################
datapt = train_images[np.random.choice(10000,20),:]
pi = np.zeros((10,20))

for labels in range(10):
    for i in range(20):
        f = np.transpose(theta_estimate)[labels,393]**datapt[i,393] * (1-np.transpose(theta_estimate)[labels,393])**(1-datapt[i,393])
        pi[labels,i] = np.prod(f)
lower = pi.sum(axis=0) 

upper = np.zeros((392,20))
for f in range(392,784):
    for labels in range(10):
        upper[f-392,:] += pi[labels,:]*np.transpose(theta_estimate)[labels,f] 
datapt[:,range(392,784)] = np.transpose(np.divide(upper,lower))
d.save_images(datapt,"2f") 


###############Question 3##############

def smax(x): 
    ex = np.exp(x - np.max(x))
    return ex / ex.sum()


def gradient(matrix, L, X):
    N = len(L)
    M = int(matrix.shape[1])
    Z = np.zeros_like(matrix)
    WX = np.matmul(X,matrix)
    for n in range(N):
        Y = smax(WX[n,:])
        for j in range(M):
            x = X[n:n+1,:].T 
            Z[:,j:j+1] -= (Y[j] - L[n,j]) * x
    return Z


matrix = np.zeros((784,10))
for k in range(50):
    oldmatrix = matrix
    g = gradient(matrix, train_labels, train_images)
    delta = 0.5 / (k+1)
    matrix = matrix + delta*g
d.save_images(matrix.T, "q3d")



